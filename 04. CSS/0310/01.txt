
※ JSON - 데이터를 전송 할 때 많이 사용 되는 경량(한번에 묶음)의 데이터 교환 형식

* 예전에는 프론트와 백엔드의 개념이 없이 백엔드가 프론트 일까지 다 했었는데,
  JSON이 나오면서 프론트와 백엔드로 업무가 나눠짐

* 프론트와 백엔드는 JSON으로 의사소통을 함 - JSON은 의사소통 방식임

* 장점, 단점
  장점 : 문서화를 할 수 있다, 재사용이 가능하다.
  단점 : 없다.

* postman.com       ->   JSON 통역 싸이트

--------------------------------------------------------------------------------------


* DATA 형식

  - 중괄호
  - key(중복 x), value(중복 o)로 구성
  - value(문자형, 정수형, 논리형, 배열, json, ...)

    ex)  emp:
         {
	empno : 7369,
	ename : "SMITH",
	mgr : [7902, 7370]       // SMITH의 사수 번호
         }
         

--------------------------------------------------------------------------------------


* SMITH의 사수 직업과 급여를 알고 싶을 때

         emp:
         {
	empno : 7369,
	ename : "SMITH",
	mgr : [
		{
			deptJob : "CLERK",
			deptSal : 3000
		},
		{
			deptJob : "MANAGER",
			deptSal : 2900
		}
	        ]
         }


--------------------------------------------------------------------------------------


* SMITH의 직업과 급여를 알고 싶다.
  SMITH의 부서 이름을 알고 싶다.
  SMITH의 부서 인원수를 알고 싶다.

	emp:
	{
		ename : "SMITH",
		jab : "CLERK",
		sal : 2500,
		dname : "SALES",
		dnameCount : 5
	}


--------------------------------------------------------------------------------------


* SMITH의 사원번호와 급여를 알고 싶다.
  SMITH의 사수는 3명이고, 사수의 번호와 직업을 알고 싶다.

	emp:
	{
		ename : "SMITH",
		empno : 7369,
		sal : 3000,
		mgr : [
			{
				deptno : 7100,
				deptJob : "CLERK"
			}
			{
				deptno : 7101,
				deptJob : "CLERK"
			}
			{
				deptno : 7102,
				deptJob : "CLERK"
			}
		        ]
	}

