* 메소드 오버로딩
  이름이 같은 여러개의 "메소드를 중복 선언"하여, 사용의 편리성을 제공
  (인자값을 다르게 설정하면 가능, 리턴타입은 중요하지 않음)

     조건 1 : 이름이 동일해야 함
     조건 2 : 인자의 개수가 달라야 함.
     조건 3 : 인자의 타입이 달라야 함.
     조건 4 : 동일한 클래스 파일 안에 있어야 함.

  메소드는 인자가 중요함.


	// 메소드 오버로딩
	public int getSum(int x, int y) 
	{
		return 0;
	}
	
	public int getSum(int x, int y, int z) 
	{
		return 0;
	}
	
	
	public static void main(String[] args) 
	{
	
	}


----------------------------------------------------------------------------------


* 오버로딩과 오버라이딩의 차이점
  오버로딩(Overloading) : 같은 이름의 메서드 여러개를 가지면서 매개변수의 유형과 개수가 다르도록 하는 기술
  오버라이딩(Overriding) : 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의해서 사용


----------------------------------------------------------------------------------


* 클래스
  객체지향언어 특징 ( 면접 필수 질문 )

	객체 ( 오브젝트 ) : 고유한 특성을 가짐.
	     객체들이 모여서 하나의 프로그램이 탄생.
	     객체를 나눈 이유 : 하나의 객체를 손 봐야 할 때,
                                        모든 객체를 볼 필요 없이 해당 객체만 바로 볼 수 있게 하기 위함.
	지향 : 

     1. 캡슐화 : 내부를 마치 캡슐처럼 보호.
	       클래스가 메소드를 담고 있어서 캡슐화라고 부름.
     2. 상속 : 클래스를 부모와 자식으로 두고, 부모의 기능을 물려받음.
	    상위 클래스를 지정한 후에, 여러개로 나눈 클래스를 상위 클래스에 참조 시킴.
     3. 다형성 : 같은 이름의 메소드가 다르게 구현.
	       ( 메소드 '오버로딩, 오버라이딩' )

     public class 안에는 public class를 또 만들수가 없다.
     해당 클래스 안에 클래스를 또 만들수 없다. public class는 고유함.


----------------------------------------------------------------------------------


* 피자 클래스에서 메소드를 만들고!

	// 피자라는 객체(오브젝트) 생성
	public class Pizza {

		public void 도우를만들다()
		{
			System.out.println("도우 만드는중");
		}
	
		public void 토핑을추가하다(String 토핑)
		{
			System.out.println(토핑+" 토핑 추가!");
		}
	
		public void 피자를굽다()
		{
			System.out.println("피자 굽는중");
		}
	
		// 메소드에 접근지정자를 private으로 선언하면, 외부 클래스에서 호출시 해당 메소드를 호출할 수 없다.
		public void 비법소스를첨가하다()
		{
			System.out.println("최고급 트러플 오일 듬뿍!");
		}
	
	} // 캡슐화




* 클라이언트 클래스에서 피자 클래스의 메소드를 호출

	public class Client {

		public static void main(String[] args) {

			// 피자 객체(오브젝트) 호출
			Pizza 하와이안피자_치즈듬뿍 = new Pizza();
			// 피자를 객체화(인스턴스화) 했다.
			하와이안피자_치즈듬뿍.도우를만들다();
			하와이안피자_치즈듬뿍.토핑을추가하다("고구마");
			하와이안피자_치즈듬뿍.피자를굽다();
			System.out.println();
			// 불고기피자 만드는 과정
			Pizza 불고기피자 = new Pizza();
			하와이안피자_치즈듬뿍.도우를만들다();
			하와이안피자_치즈듬뿍.토핑을추가하다("소고기와불고기");
			하와이안피자_치즈듬뿍.피자를굽다();
			하와이안피자_치즈듬뿍.비법소스를첨가하다();
		
		}

	}


----------------------------------------------------------------------------------


		// 소문자에서 대문자로 변환
		String 소문자 = "abcd";
		String result = "";
		result = 소문자.toUpperCase();
		System.out.println(result);


		// 대문자에서 소문자로 변환
		String name = "ABCD";
		String result = name.toLowerCase();
		System.out.println(result);


----------------------------------------------------------------------------------


		// 문자 입력
		String id = "홍길동";
		String result = "";
		result = id.trim();
		System.out.println(result);


----------------------------------------------------------------------------------



		// 입력한 숫자를 불러오는
		String phone = "010-1234-1234";
		String array[] = phone.split("-");
		System.out.print(array[0]);
		System.out.print(array[1]);
		System.out.print(array[2]);


----------------------------------------------------------------------------------


		// 길이가 길어서 못적을때 수정하게 하는
		String 닉네임 = "Zi존도적xx";
		int len = 닉네임.length();
		System.out.println(len);
		
		if(len>=4)
		{
			System.out.println("닉네임은 4글자 이하로만 작성 가능합니다.");
		}


----------------------------------------------------------------------------------


		// 금지단어를 적었을때 걸러내는
		String result = "";
		String password = "123@";
		result = password.replace("@", "");   // ("@", "")  >>  왼쪽이 대상, 오른쪽이 내가 바꾸고 싶은 문자
		System.out.println(result);


----------------------------------------------------------------------------------


		// 가운데 문자 공백 제거
		String password2 = "123 123 123";
		String result = password.replace(" ", "");
		System.out.println(result);


----------------------------------------------------------------------------------


* 자바 main 함수에는
  1) static 함수와
  2) new 선언으로 만든 클래스 메소드가 올 수 있다.


----------------------------------------------------------------------------------


* DW 코딩 규칙

  1) 변수 생성 방법 ( 변수를 막 만들어보는게 가장 중요 )
      1. 메소드에 리턴 값이 있으면 우선 변수로 받는다.
      2. 선언한 변수가 행동이 일어나서 결과값이 생길 때,
         ex) int x = 10;
             int y = 10;
             int sum = x + y;   // sum 으로 데이터를 받는다.
      3. 선언한 변수가 정말 필요한지 고민 ( 재활용이 가능한지 )
      4. 지역변수에서만 활용할건지 전역변수로도 활용할건지 생각

  2) 메소드 분리 방법
      1. 함수가 어려우면 메인함수에 코딩
      2. 메인함수로 결과가 나오면 함수로 분리할 것
      3. 고민을 계속 해야 실력이 늘어남

