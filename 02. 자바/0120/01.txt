* 클래스 복습

객체지향언어 특징

	// 클래스는 객체(Object)다.
	public class Pizza
	{
		// 피자 클래스에는
		// 피자에 관련된 변수와 함수만 위치한다.
		// 클래스는 필드(전역)변수와 메소드로만 구성.

		int 햄;
		String 피자이름;


		public void 도우를 만들다()
		{
			int x = 0;
			코드
		}
		
	}





	public class 피자스쿨
	{
		// 조건 - 크래스와 메소드를 실행해서 결과 값을 보고 싶을 때
		// 자바는 메인 함수만 알고 있음.
		// 그래서 외부 클래스 파일을 불러올 때, 메인 함수에서 해야 함.
		// 메소드도 메인 함수에서 불러와야 함.

		public static void main(String[] args)
		{
			Pizza             치즈피자      =                 new Pizza();
			<데이터타입>  <변수이름>  <대입연산자>  <클래스>

			치즈피자.햄 = 100;
			// '.'을 찍어서 해당 클래스의 변수 혹은 메소드를 불러오기가 가능함.

			치즈피자.도우를만들다();


			Pizza 불고기피자 = new Pizza();
			불고기피자.햄 = 50;

			불고기피자 = 치즈피자;
			// 기존 불고기피자의 데이터가 없어짐
			// int x = 10;
			// int y = 20;
			// x = y;
			// 위 세줄과 같은 것임

			Pizza pizza[] = new Pizza();
			// 클래스도 데이터 타입이라서 배열 선언이 가능함
			pizza[0] = 치즈피자;
			pizza[1] = 불고기피자;
			// 'new Pizza();'를 불러온 애들만 사용 가능.
			// 제네릭으로 가능함.

		}
	}



-------------------------------------------------------------------------------------------------------------------



	public class 이태원클라스 {

		// 총 이태원클라스는 필드(전역)변수 2개와 메소드 1개가 구성됨.
		// 필드변수가 2개
		// 실무에서는 필드변수를 private으로 함.
		String 주인공;
		String 동료;
		// 메소드가 1개
		public void 학교를때려치다(String name)
		{
			this.주인공 = name;  // 필드변수를 불러와서 쓸때는
                                                              // 앞에 'this.'를 써야 함.
                                                              // this가 붙은 변수는 필드변수라서
                                                              // 코드가 길어졌을때 쉽게 찾을 수 있음.
			System.out.println(name+"(이)가 학교를 나갔습니다..");
		}
	}






	public class jtbc {

		public static void main(String[] args) {

			이태원클라스 일부작 = new 이태원클라스();
			일부작.주인공 = "박새로이";
			일부작.동료 = "조이서";
			String name = 일부작.주인공;
			System.out.println(일부작.동료);
			일부작.학교를때려치다(name);
		
			이태원클라스 이부작 = new 이태원클라스();
			이부작.주인공 = "손흥민";
			이부작.동료 = "황희찬";
			이부작.학교를때려치다(이부작.동료);
		}

	}


